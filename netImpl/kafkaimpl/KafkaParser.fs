// Implementation file for parser generated by fsyacc
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open Microsoft.FSharp.Text.Lexing
open Microsoft.FSharp.Text.Parsing.ParseHelpers
# 1 "KafkaParser.fsp"

module KafkaParser
open AST

# 10 "KafkaParser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | EOF
  | COLON
  | SEMICOLON
  | CLASS
  | OPAREN
  | CPAREN
  | OCURLY
  | CCURLY
  | ID of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_EOF
    | TOKEN_COLON
    | TOKEN_SEMICOLON
    | TOKEN_CLASS
    | TOKEN_OPAREN
    | TOKEN_CPAREN
    | TOKEN_OCURLY
    | TOKEN_CCURLY
    | TOKEN_ID
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_program
    | NONTERM_clses
    | NONTERM_clss
    | NONTERM_expr

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | EOF  -> 0 
  | COLON  -> 1 
  | SEMICOLON  -> 2 
  | CLASS  -> 3 
  | OPAREN  -> 4 
  | CPAREN  -> 5 
  | OCURLY  -> 6 
  | CCURLY  -> 7 
  | ID _ -> 8 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_EOF 
  | 1 -> TOKEN_COLON 
  | 2 -> TOKEN_SEMICOLON 
  | 3 -> TOKEN_CLASS 
  | 4 -> TOKEN_OPAREN 
  | 5 -> TOKEN_CPAREN 
  | 6 -> TOKEN_OCURLY 
  | 7 -> TOKEN_CCURLY 
  | 8 -> TOKEN_ID 
  | 11 -> TOKEN_end_of_input
  | 9 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_program 
    | 3 -> NONTERM_clses 
    | 4 -> NONTERM_clses 
    | 5 -> NONTERM_clss 
    | 6 -> NONTERM_expr 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 11 
let _fsyacc_tagOfErrorTerminal = 9

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | EOF  -> "EOF" 
  | COLON  -> "COLON" 
  | SEMICOLON  -> "SEMICOLON" 
  | CLASS  -> "CLASS" 
  | OPAREN  -> "OPAREN" 
  | CPAREN  -> "CPAREN" 
  | OCURLY  -> "OCURLY" 
  | CCURLY  -> "CCURLY" 
  | ID _ -> "ID" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | EOF  -> (null : System.Object) 
  | COLON  -> (null : System.Object) 
  | SEMICOLON  -> (null : System.Object) 
  | CLASS  -> (null : System.Object) 
  | OPAREN  -> (null : System.Object) 
  | CPAREN  -> (null : System.Object) 
  | OCURLY  -> (null : System.Object) 
  | CCURLY  -> (null : System.Object) 
  | ID _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us; 65535us; 1us; 65535us; 0us; 1us; 1us; 65535us; 0us; 2us; 2us; 65535us; 0us; 4us; 6us; 7us; 2us; 65535us; 0us; 6us; 6us; 6us; 1us; 65535us; 4us; 5us; |]
let _fsyacc_sparseGotoTableRowOffsets = [|0us; 1us; 3us; 5us; 8us; 11us; |]
let _fsyacc_stateToProdIdxsTableElements = [| 1us; 0us; 1us; 0us; 1us; 1us; 1us; 1us; 1us; 2us; 1us; 2us; 2us; 3us; 4us; 1us; 4us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 5us; 1us; 6us; |]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us; 2us; 4us; 6us; 8us; 10us; 12us; 15us; 17us; 19us; 21us; 23us; 25us; |]
let _fsyacc_action_rows = 13
let _fsyacc_actionTableElements = [|1us; 32768us; 3us; 8us; 0us; 49152us; 1us; 32768us; 0us; 3us; 0us; 16385us; 1us; 32768us; 8us; 12us; 0us; 16386us; 1us; 16387us; 3us; 8us; 0us; 16388us; 1us; 32768us; 8us; 9us; 1us; 32768us; 6us; 10us; 1us; 32768us; 7us; 11us; 0us; 16389us; 0us; 16390us; |]
let _fsyacc_actionTableRowOffsets = [|0us; 2us; 3us; 5us; 6us; 8us; 9us; 11us; 12us; 14us; 16us; 18us; 19us; |]
let _fsyacc_reductionSymbolCounts = [|1us; 2us; 2us; 1us; 2us; 4us; 1us; |]
let _fsyacc_productionToNonTerminalTable = [|0us; 1us; 2us; 3us; 3us; 4us; 5us; |]
let _fsyacc_immediateActions = [|65535us; 49152us; 65535us; 16385us; 65535us; 16386us; 65535us; 16388us; 65535us; 65535us; 65535us; 16389us; 16390us; |]
let _fsyacc_reductions ()  =    [| 
# 124 "KafkaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (Microsoft.FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : '_startstart));
# 133 "KafkaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'program)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 19 "KafkaParser.fsp"
                                         _1
                   )
# 19 "KafkaParser.fsp"
                 : string));
# 144 "KafkaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clses)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'expr)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 20 "KafkaParser.fsp"
                                          Program(_1, _2)
                   )
# 20 "KafkaParser.fsp"
                 : 'program));
# 156 "KafkaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clss)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 22 "KafkaParser.fsp"
                               [_1] 
                   )
# 22 "KafkaParser.fsp"
                 : 'clses));
# 167 "KafkaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : 'clss)) in
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : 'clses)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 23 "KafkaParser.fsp"
                                     _1 :: _2 
                   )
# 23 "KafkaParser.fsp"
                 : 'clses));
# 179 "KafkaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _2 = (let data = parseState.GetInput(2) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 25 "KafkaParser.fsp"
                                                ClassDef(_2, [], [])
                   )
# 25 "KafkaParser.fsp"
                 : 'clss));
# 190 "KafkaParser.fs"
        (fun (parseState : Microsoft.FSharp.Text.Parsing.IParseState) ->
            let _1 = (let data = parseState.GetInput(1) in (Microsoft.FSharp.Core.Operators.unbox data : string)) in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 27 "KafkaParser.fsp"
                            Var(_1)
                   )
# 27 "KafkaParser.fsp"
                 : 'expr));
|]
# 202 "KafkaParser.fs"
let tables () : Microsoft.FSharp.Text.Parsing.Tables<_> = 
  { reductions= _fsyacc_reductions ();
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:Microsoft.FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 12;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = (tables ()).Interpret(lexer, lexbuf, startState)
let start lexer lexbuf : string =
    Microsoft.FSharp.Core.Operators.unbox ((tables ()).Interpret(lexer, lexbuf, 0))
